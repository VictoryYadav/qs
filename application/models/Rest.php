<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Rest extends CI_Model{	private $db2;	public function __construct()	{		parent::__construct();		        $my_db = $this->session->userdata('my_db');        $this->db2 = $this->load->database($my_db, TRUE);	}	public function getUserRestRole(){		return $this->db2->get_where('UserType', array('UTyp >' => 20))->result_array();	}	public function getUserTypeList(){		return $this->db2->get_where('UserType', array('UTyp <' => 10))->result_array();	}	public function getOffersList(){		$langId = $this->session->userdata('site_lang');        $scName = "c.SchNm$langId";		return $this->db2->select("(case when $scName != '-' Then $scName ELSE c.SchNm1 end) as SchNm, c.SchCd, c.SchTyp ,c.SchCatg, c.FrmDt, c.ToDt, c.FrmDayNo, c.ToDayNo, IFNULL((select count(k.SchCd) from Kitchen k where k.Schcd=c.SchCd and k.EID=c.EID),0) as offer1, IFNULL((select count(k.SchCd) from KitchenMain k where k.Schcd=c.SchCd and k.EID=c.EID),0) as offer2, c.Stat")						->order_by('c.SchCd', 'desc')						->get_where('CustOffers c', array('c.Stat' => 0, 'EID' => authuser()->EID))						->result_array();	}	public function passwordUpdate($password){ 		$this->db2->update('UsersRest', array('Passwd' => $password), array('RUserId' => authuser()->RUserId));			 		}	public function getRestaurantList(){		return $this->db2->select('EID, Name')						->order_by('EID DESC')						->get_where('Eatary', array('Stat' => 0))						->result_array();	}	public function getOTypeList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("*, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")->get_where('orderType', array('Stat' => 0))					->result_array();	}	public function addUser($data){		unset($data['RUserId']);		$check = $this->db2->get_where('UsersRest', array('MobileNo' => $data['MobileNo'], 'Stat' => 0))->row_array();		if(empty($check)){			$createrData = $this->db2->get_where('UsersRest', array('RUserId' => authuser()->RUserId))->row_array();			$data['ChainId'] = $createrData['ChainId'];			$data['Stat'] = $createrData['Stat'];			$data['LoginCd'] = authuser()->RUserId;			$data['Passwd'] = 'eo1234';			$data['PWDHash'] = md5('eo1234');			$newRUserId = insertRecord('UsersRest', $data);				$GUsersRest['FName'] = $data['FName'];			$GUsersRest['LName'] = $data['LName'];			$GUsersRest['MobileNo'] = $data['MobileNo'];			$GUsersRest['PEmail'] = $data['PEmail'];			$GUsersRest['DOB'] = $data['DOB'];			$GUsersRest['Gender'] = $data['Gender'];			// $GUsersRest['UTyp'] = $data['UTyp'];			// $GUsersRest['RestRole'] = $data['RestRole'];			$GUsersRest['RUserId'] = $newRUserId;			$genDB = $this->load->database('GenTableData', TRUE);			$genDB->insert('UsersRest', $GUsersRest);					if(!empty($newRUserId)){				$this->sendUserLoginMsg();				$res = $data['FName'].' '.$data['LName']." Created Successfully";				if($data['UTyp'] == 9){					$userRolesAccessObj['EID'] = $createrData['EID'];					$userRolesAccessObj['RUserId'] = $newRUserId;					$userRolesAccessObj['RoleId']= 21;					insertRecord('UserRolesAccess', $userRolesAccessObj);					$userRolesAccessObj['EID'] = $createrData['EID'];					$userRolesAccessObj['RUserId'] = $newRUserId;					$userRolesAccessObj['RoleId']= 26;					insertRecord('UserRolesAccess', $userRolesAccessObj);				}			}else{				$res = "Failed to Create ".$data['FName'].' '.$data['LName'];			}		}else{			$res = "Mobile No Already Exists";		}		return $res;	}	private function sendUserLoginMsg(){		// this function is not completed		// msg= login has been created		// RuserId / token from restusers	}	public function getUserAccessRole($postdata){		$EID = authuser()->EID;		        $langId = $this->session->userdata('site_lang');        $lname = "ur.Name$langId";	        			if (isset($postdata['getUser']) && $postdata['getUser']==1) {				$mobileNumber =  $postdata['mobileNumber'];				// $user = $userRestObj->search(["MobileNo" => $mobileNumber, "EID" => $EID]);				$user = $this->db2->get_where('UsersRest', array("MobileNo" => $mobileNumber, "EID" => $EID, 'Stat' => 0))->row_array();				if (!empty($user)) {					$response = [						"status" => 1,						"userId" => $user['RUserId'],						"userName" => $user['FName']." ".$user['LName']					];				}else {					$response = [						"status" => 0,						"msg" => "User Not Found"					];				}				return $response;			}			if (isset($postdata['getAvailableRoles']) && $postdata['getAvailableRoles']==1) {			$userId =  $postdata['userId'];			$availableRoles = $this->db2->query("SELECT ur.RoleId, (case when $lname != '-' Then $lname ELSE ur.Name1 end) as Name FROM UserRoles ur WHERE  ur.Stat = 0 and ur.roleUser = 0 AND ur.RoleId NOT IN (SELECT RoleId FROM UserRolesAccess WHERE RUserId = $userId AND EID = $EID) Order by ur.Name1")->result_array();			return $availableRoles;			if (!empty($availableRoles)) {				$response = [					"status" => 1,					"availableRoles" => $availableRoles				];			}else {				$response = [					"status" => 0,					"msg" => "Fail to Find roles"				];			}					return $response;		}		if (isset($postdata['setRoles']) && $postdata['setRoles']==1) {			$roles = explode(",", $postdata['roles']);			$userId = $postdata['userId'];			$response = [				"status" => 1,				"msg" => "Roles are assigned"			];			foreach ($roles as $role) {				$userRolesAccessObj['EID'] = $EID;				$userRolesAccessObj['RUserId'] = $userId;				$userRolesAccessObj['RoleId'] = $role;				$this->db2->insert('UserRolesAccess',$userRolesAccessObj);				$idd = $this->db2->insert_id();				if(empty($idd)){					$response = [						"status" => 0,						"msg" => "Failed to insert in UserRolesAccess table"					];				}			}						return $response;		}		if (isset($postdata['setRestRoles']) && $postdata['setRestRoles']==1) {			$userId = $postdata['userId'];			$roles = $postdata['roles'];			$response = "Roles are assigned";			$userRolesAccessObj = [];			$temp = [];			foreach ($roles as $role) {				$temp['EID'] = $EID;				$temp['RUserId'] = $userId;				$temp['RoleId'] = $role;				$userRolesAccessObj[] = $temp;			}			if(!empty($userRolesAccessObj)){				$this->db2->insert_batch('UserRolesAccess', $userRolesAccessObj); 			}else{				$response = "Failed to insert in UserRolesAccess table";			}			return $response;		}		if (isset($postdata['getAssignedRoles']) && $postdata['getAssignedRoles']==1) {			$userId = $postdata['userId'];			$getAssignedRoles = $this->db2->query("SELECT ura.URNo, (case when $lname != '-' Then $lname ELSE ur.Name1 end) as Name FROM `UserRolesAccess` ura, UserRoles ur WHERE ura.RoleId = ur.RoleId AND ur.Stat = 0 AND ura.EID = $EID AND ura.RUserId = $userId Order by ur.Name1")->result_array();			return $getAssignedRoles;			if (!empty($getAssignedRoles)) {				$response = [					"status" => 1,					"getAssignedRoles" => $getAssignedRoles				];			}else {				$response = [					"status" => 0,					"msg" => "No Roles are assigned"				];			}			// echo json_encode($response);			// die();			return $response;		}		if (isset($postdata['removeRoles']) && $postdata['removeRoles']==1) {			$roles = $postdata['roles'];			$userId = $postdata['userId'];			$deleteRoles = $this->db2->query("DELETE FROM UserRolesAccess WHERE EID = $EID AND URNo IN ($roles)");			if ($deleteRoles) {				$response = [					"status" => 1,					"msg" => "Roles are Removed"				];			}else {				$response = [					"status" => 0,					"msg" => "Failed to delete in UserRolesAccess table"				];			}						return $response;		}		if (isset($postdata['removeRestRoles']) && $postdata['removeRestRoles']==1) {						$URNo = implode(",",$postdata['URNo']);			$userId = $postdata['userId'];			$deleteRoles = $this->db2->query("DELETE FROM UserRolesAccess WHERE EID = $EID AND RUserId = $userId and URNo IN ($URNo)");			if ($deleteRoles) {				$response = "Roles are Removed";			}else {				$response = "Failed to delete in UserRolesAccess table";			}			return $response;		}	}	public function getDispenseAccess(){		$RUserId = authuser()->RUserId;		$EID = authuser()->EID;        $data = array();		$GetDCD = $this->db2->get_where('UsersRoleDaily', array('RUserId' => $RUserId))->row_array();		if(!empty($GetDCD)){			$langId = $this->session->userdata('site_lang');	        $dname = "Name$langId";	        if(!empty($GetDCD['DCd'])){	        	$dcd = "(".$GetDCD['DCd'].")";				$data = $this->db2->query("SELECT DCd, (case when $dname != '-' Then $dname ELSE Name1 end) as Name, DCdType FROM Eat_DispOutlets Where EID = $EID AND Stat = 0 and DCd in $dcd")->result_array();	        }		}        return $data;	}	public function getStockList($postdata=null){		$EID = authuser()->EID;				if(!empty($_POST['trans_id'])){			$this->db2->where('rs.trans_id', $_POST['trans_id']);		}		if(!empty($_POST['trans_type'])){			$this->db2->where('rs.TransType', $_POST['trans_type']);		}		if(!empty($_POST['from_date'])){			$this->db2->where('rs.TransDt >=', $_POST['from_date']);		}		if(!empty($_POST['to_date'])){			$this->db2->where('rs.TransDt <=', $_POST['to_date']);		}        $FName = "m.Name as FName";        $TName = "mto.Name as TName";        return $this->db2->select("rs.TransId, rs.TransType, rs.TransDt, $FName, $TName")        				->join('Masts m', 'm.MCd = rs.FrmID', 'inner')        				->join('Masts mto', 'mto.MCd = rs.ToID', 'inner')        				->get_where('RMStock rs', array('rs.EID' => $EID))        				->result_array();	}	public function getStockReport(){		$langId = $this->session->userdata('site_lang');        $lname = "rmi.Name$langId";        $EID = authuser()->EID;        return $this->db2->query("SELECT rmi.RMCd, rmi.ItemId, (case when $lname != '-' Then $lname ELSE rmi.Name1 end) as RMName,  m.MCd, m.Name as StoreName , sum(case when rsd.TTyp=2 and m.MCd = rsd.StoreId and rsd.RMCd = rmi.RMCd Then rsd.Qty ELSE 0 end) as rcvd, sum(case when rsd.TTyp=1 and m.MCd = rsd.StoreId and rsd.RMCd = rmi.RMCd Then rsd.Qty ELSE 0 end) as issued, IfNull((Select sum(k.Qty) from Kitchen k where rmi.ItemId = k.ItemId and k.KitCd = m.MCd and k.Stat = 3 and k.EID=rmi.EID ),0) as sold from RMStock rs, RMStockDet rsd, RMItems as rmi, Masts as m where rs.EID = $EID and m.EID = $EID and rmi.EID = $EID and rmi.RMCd = rsd.RMCd and rsd.Stat = 0 and rs.Stat = 0 and rs.TransId=rsd.TransId and m.MstTyp !=2 group by m.MCd, rmi.RMCd HAVING (issued>0 or rcvd>0)")->result_array();	}	public function getStockConsumption(){		$langId = $this->session->userdata('site_lang');        $lname = "rmi.Name$langId";        $rmname = "rmc.Name$langId";        $EID = authuser()->EID;		return $this->db2->query("SELECT (case when $rmname != '-' Then $rmname ELSE rmc.Name1 end) as RMCatgName, (case when $lname != '-' Then $lname ELSE rmi.Name1 end) as RMName, rs.TransType, rsd.RMCd,m.MCd, m.Name as StockName, sum(case when rs.TransType < 10 && rs.ToID= m.MCd and (rsd.RMCd=rmi.RMCd) Then rsd.Qty ELSE 0 end) as issued, sum(case when rs.TransType >= 10 && rs.ToID= m.MCd and (rsd.RMCd=rmi.RMCd) Then rsd.Qty else 0 end) as rcvd, sum(case when rs.TransType < 10 and k.KitCd= m.MCd and k.EID=$EID and k.Stat=3 and (rsd.RMCd=rmi.RMCd) Then k.Qty else 0 end) as sold FROM RMStockDet as rsd, RMStock as rs, Masts as m, Kitchen k, RMItems as rmi, RMCatg as rmc where rmi.RMCatg = rmc.RMCatgCd and rmi.ItemId=k.ItemId and rsd.TransId = rs.TransId  and rsd.Stat = 0 and rs.Stat = 0  and m.EID = $EID and rs.EID=$EID  and rmi.ItemId > 0 group by m.Name order by  m.Name")->result_array();		// echo "<pre>";		// print_r($dd);die;		 // HAVING (rcvd-issued-sold) > 0	}	public function getItemStockReportList($postdata){		$EID = authuser()->EID;		$RMCd 		= $postdata['RMCd'];		$MCd 		= $postdata['MCd'];		$from_date 	= $postdata['from_date'];		$to_date 	= $postdata['to_date'];		$mcd_whr = '';		if(!empty($RMCd)){			$mcd_whr .= " and rsd.StoreId = $MCd";		}		if(!empty($MCd)){			$mcd_whr .= " and rsd.RMCd = $RMCd";		}		$langId = $this->session->userdata('site_lang');		$lname = "rmi.Name$langId";		$runame = "ru.Name$langId";		$data['report'] = $this->db2->query("SELECT rs.TransType, rs.TransDt, (case when $lname != '-' Then $lname ELSE rmi.Name1 end) as RMName, (case when $runame != '-' Then $runame ELSE ru.Name1 end) as UOM, rsd.* , sum(case when rsd.TTyp=2 and m.MCd = rsd.StoreId and rsd.RMCd = rmi.RMCd Then rsd.Qty ELSE 0 end) as rcvd, sum(case when rsd.TTyp=1 and m.MCd = rsd.StoreId and rsd.RMCd = rmi.RMCd Then rsd.Qty ELSE 0 end) as issued from RMStock as rs, RMStockDet as rsd, RMItems as rmi, RMUOM as ru, Masts m where rs.TransId = rsd.TransId and rsd.RMCd = rmi.RMCd and ru.UOMCd = rsd.UOMCd $mcd_whr and rs.TransDt >= '$from_date' and rs.TransDt <='$to_date' and rs.EID = $EID and rmi.EID = $EID and m.EID = $EID GROUP by rsd.TransId, rmi.RMCd")->result_array();		// opening stock		$s = $this->db2->query("SELECT sum(case when rsd.TTyp=2 $mcd_whr Then rsd.Qty ELSE 0 end) as rcvd, sum(case when rsd.TTyp=1 $mcd_whr Then rsd.Qty ELSE 0 end) as issued from RMStock as rs, RMStockDet as rsd  where rs.TransId = rsd.TransId $mcd_whr and rs.TransDt < '$from_date' and rs.EID = $EID group by rsd.RMCd")->row_array();		$data['op_stock'] = 0;		if(!empty($s) && !empty($s['stock'])){			$data['op_stock'] = $s['rcvd'] - $s['issued'];		}		return $data;	}		public function getThirdOrderData(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("3PId, (case when $lname != '-' Then $lname ELSE Name1 end) as LngName, Stat")						->get('3POrders')						->result_array();	}	public function getTablesAllotedData($EID){		return $this->db2->where_not_in('TableNo', array(101,105,110, 115, 100))				->get_where('Eat_tables', array("EID" => $EID))				->result_array();	}	public function getMergeNoByCNo($CNo){		$EID = authuser()->EID;		$dt =  $this->db2->select("MergeNo")->get_where('KitchenMain', array("EID" => $EID, 'CNo' => $CNo))				->row_array();		return $dt['MergeNo'];	}	public function getItemLists(){		$langId = $this->session->userdata('site_lang');        $lname = "i.Name$langId";        $cname = "c.Name$langId";		return $this->db2->select("i.*, (case when $lname != '-' Then $lname ELSE i.Name1 end) as RMName, (case when $cname != '-' Then $cname ELSE c.Name1 end) as RMCatgName")						->order_by('i.Name1', 'asc')						->join('RMCatg c','c.RMCatgCd = i.RMCatg', 'inner')						->get_where('RMItems i', array('i.Stat' => 0))						->result_array();	}	public function getBomDishLists(){		$langId = $this->session->userdata('site_lang');        $rname = "r.Name$langId";        $mname = "m.Name$langId";        $rmname = "rm.Name$langId";		return 	$this->db2->select("b.*, (case when $rmname != '-' Then $rmname ELSE rm.Name1 end) as Name, (case when $rname != '-' Then $rname ELSE r.Name1 end) as RMName ,(case when $mname != '-' Then $mname ELSE m.Name1 end) as ItemNm")						->join('MenuItem m','m.MCatgId = b.ItemId', 'inner')						->join('RMItems r','r.RMCd = b.RMCd', 'inner')						->join('RMUOM rm', 'rm.UOMCd= b.RMUOM', 'inner')						->get('BOM_Dish b')						->result_array();	}	public function getRmUOMlist($RMCd){		$langId = $this->session->userdata('site_lang');        $rmname = "r.Name$langId";		return $this->db2->select("r.*, (case when $rmname != '-' Then $rmname ELSE r.Name1 end) as Name, rm.RMCd")                            ->join('RMUOM r','r.UOMCd = rm.UOMCd', 'inner')                              ->get_where('RMItemsUOM rm', array('rm.RMCd' => $RMCd))                              ->result_array();	}	public function getRMUOMlisting($RMCd = null){		$langId = $this->session->userdata('site_lang');        $rmname = "r.Name$langId";        $riname = "ri.Name$langId";        if(!empty($RMCd)){        	$this->db2->where('rm.RMCd', $RMCd);        }		return $this->db2->select("(case when $rmname != '-' Then $rmname ELSE r.Name1 end) as UOMName, rm.RCd, rm.RMCd, rm.UOMCd, (case when $riname != '-' Then $riname ELSE ri.Name1 end) as RMItems, rm.Stat")                            ->join('RMUOM r','r.UOMCd = rm.UOMCd', 'inner')                            ->join('RMItems ri','ri.RMCd = rm.RMCd', 'inner')                              ->get('RMItemsUOM rm')                              ->result_array();	}	public function getDispenseModes(){		return $this->db2->get_where('3POrders', array('Stat' => 0))->result_array();	}	public function getPaymentList($data){				if(!empty($data['fdate'])){			$this->db2->where('PymtDate >= ', date('Y-m-d', strtotime($data['fdate'])));		}		if(!empty($data['tdate'])){			$tdate = date('Y-m-d', strtotime("+1 day", strtotime($data['tdate'])));			$this->db2->where('PymtDate <= ', $tdate);		}		if(!empty($data['pmode'])){			$this->db2->where('bp.PaymtMode',$data['pmode']);		}			return $this->db2->select('bp.*, b.BillNo, b.BillPrefix, b.BillSuffix')->order_by('bp.PymtNo', 'DESC')						->join('Billing b', 'b.BillId = bp.BillId', 'inner')						->get_where('BillPayments bp', array('bp.Stat' => 1))						->result_array();							}	public function getPaymentModes(){		$langId = $this->session->userdata('site_lang');        $lname = "cp.Name$langId";		return $this->db2->select("cp.PymtMode, (case when $lname != '-' Then $lname ELSE cp.Name1 end) as Name, cp.Company, cp.CodePage1")						->order_by('cp.Rank', 'ASC')						->join('PymtModes pm', 'pm.PymtMode = cp.PymtMode', 'inner')						->get_where('ConfigPymt cp', array('cp.Stat' => 1))->result_array();	}	public function getConfigPayment(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("*, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")						->get('ConfigPymt')						->result_array();	}	public function get_MCatgId(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("MCatgId, (case when $lname != '-' Then $lname ELSE Name1 end) as MCatgNm")->get_where('MenuCatg', array('EID' => authuser()->EID, 'Stat' => 0 ))->result_array();	}	public function getMenuCatListByCID($EID, $CID){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("MCatgId, (case when $lname != '-' Then $lname ELSE Name1 end) as MCatgNm")->get_where('MenuCatg', array('EID' => $EID, 'Stat' => 0, 'CID' => $CID))->result_array();	}	public function getMenuCatList(){		$langId = $this->session->userdata('site_lang');        $lname = "mc.Name$langId";        $cuisine = "c.Name";        $kitchen = "et.Name$langId";        $whr = "et.EID = mc.EID";		return $this->db2->select("mc.MCatgId, (case when $lname != '-' Then $lname ELSE mc.Name1 end) as MCatgNm, (case when $cuisine != '-' Then $cuisine ELSE c.Name end) as cuisine, (case when $kitchen != '-' Then $kitchen ELSE et.Name1 end) as kitchen, mc.CID, mc.EID, mc.Rank, mc.KitCd, mc.Stat")						->join('Cuisines c', 'c.CID = mc.CID', 'inner')						->join('Eat_Kit et', 'et.KitCd = mc.KitCd', 'inner')						->where($whr)						->get_where('MenuCatg mc', array('mc.EID' => authuser()->EID, 'mc.Stat' => 0 ))->result_array();	}		public function getCuisineList(){		return $this->db2->select("c.CID, c.Name, c.Stat")						->order_by('ec.Rank', 'ASC')						->join('Cuisines c', 'c.CID = ec.CID', 'inner')						->get_where('EatCuisine ec', array('ec.EID' => authuser()->EID,'ec.Stat' => 0))						->result_array();	}	public function getEatCuisineList(){		$langId = $this->session->userdata('site_lang');        $cuisineName = "c.Name";        $ecuisineName = "ec.Name$langId";        $kitchenName = "ek.Name$langId";		return $this->db2->select("ec.ECID, (case when $ecuisineName != '-' Then $ecuisineName ELSE ec.Name1 end) as ecuisineName, ec.EID, e.Name as restName, (case when $cuisineName != '-' Then $cuisineName ELSE c.Name end) as cuisineName, c.CID, (case when $kitchenName != '-' Then $kitchenName ELSE ek.Name1 end) as kitchenName, ec.KitCd, ec.Rank , ec.Stat")						->order_by('ec.Rank', 'ASC')						->join('Eatary e', 'e.EID = ec.EID', 'inner')						->join('Cuisines c', 'c.CID = ec.CID', 'inner')						->join('Eat_Kit ek', 'ek.KitCd = ec.KitCd', 'left')						->get_where('EatCuisine ec', array('ec.EID' => authuser()->EID,'ec.Stat' => 0))						->result_array();	}	public function getItemTypeList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("TagId, (case when $lname != '-' Then $lname ELSE Name1 end) as TDesc, TagTyp")					->get_where('MenuTags', array('TagTyp' => 2))					->result_array();	}	public function getOffersSchemeType(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SchCatg, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")						->get_where('CustOfferTypes', array('Stat' => 0, 'SchTyp' => 1))						->result_array();	}	public function getOffersSchemeCategory($stat = null){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";        if(!empty($stat)){        	$this->db2->where('Stat', 0);        }		return $this->db2->select("SchCatg, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Stat")						->get_where('CustOfferTypes', array('SchTyp' => 2))						->result_array();	}	public function get_scheme_lists($type){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SchCatg, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")						->get_where('CustOfferTypes', array('SchTyp' => $type))						->result_array();	}	public function get_foodType(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";        $Usedfor = "Usedfor$langId";		return $this->db2->select("FID, CTyp ,(case when $lname != '-' Then $lname ELSE Name1 end) as Opt, (case when $Usedfor != '-' Then $Usedfor ELSE Usedfor1 end) as Usedfor")						->order_by('CTyp, Rank','ASC')						// ->group_by('CTyp')						->get_where('FoodType', array('Stat' => 0))->result_array();		}	public function get_CType(){		$langId = $this->session->userdata('site_lang');        $Usedfor = "Usedfor$langId";		return $this->db2->select("DISTINCT(CTyp), (case when $Usedfor != '-' Then $Usedfor ELSE Usedfor1 end) as Usedfor")						->order_by('CTyp, Rank','ASC')						// ->group_by('CTyp')						->get_where('FoodType', array('Stat' => 0))->result_array();		}	public function getAllItemsList(){		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";		return $this->db2->select("m.ItemId, (case when $lname != '-' Then $lname ELSE m.Name1 end) as Name")						->order_by('m.Name1','ASC')						->group_by('m.ItemId')						->join('MenuItemRates mir', 'mir.ItemId = m.ItemId', 'inner')						->get_where('MenuItem m', array('m.Stat' => 0, 'm.EID' => authuser()->EID, 'mir.OrigRate >' => 0))->result_array();			}	public function getRMItemsList()	{		$langId = $this->session->userdata('site_lang');        $lname = "rm.Name$langId";		return $this->db2->select("rm.*, (case when $lname != '-' Then $lname ELSE rm.Name1 end) as Name")						->order_by('rm.Name1','ASC')						->get_where('RMItems rm', array('rm.ItemId >' => 0, 'rm.Stat' => 0, 'rm.EID' => authuser()->EID))->result_array();			}	public function getAllRMItemsList()	{		$langId = $this->session->userdata('site_lang');        $lname = "rm.Name$langId";		return $this->db2->select("rm.*, (case when $lname != '-' Then $lname ELSE rm.Name1 end) as Name")						->order_by('rm.Name1','ASC')						->get_where('RMItems rm', array('rm.Stat' => 0, 'rm.EID' => authuser()->EID))->result_array();			}	public function getAllItemsListByMenuCatgId($MCatgId){		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";		return $this->db2->select("m.ItemId, (case when $lname != '-' Then $lname ELSE m.Name1 end) as Name")						->order_by('m.Name1','ASC')						->group_by('m.ItemId')						->join('MenuItemRates mir', 'mir.ItemId = m.ItemId', 'inner')						->get_where('MenuItem m', array(										'm.Stat' => 0, 										'm.EID' => authuser()->EID, 										'mir.OrigRate >' => 0,										'm.MCatgId' => $MCatgId))->result_array();			}	public function get_kitchen(){		$langId = $this->session->userdata('site_lang');        $KitName = "Name$langId";		return $this->db2->select("KitCd ,(case when $KitName != '-' Then $KitName ELSE Name1 end) as KitName, Stat, PrinterName, PrintIP")						->get_where('Eat_Kit', array(												'Stat' => 0, 												'EID' => authuser()->EID												)									)						->result_array();		}	public function get_eat_section(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SecId, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Stat")->get_where('Eat_Sections', array('Stat' => 0))->result_array();		}	public function getSectionList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SecId, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Stat")						->get_where('Eat_Sections')						->result_array();		}	public function getIntermediatBom(){		return $this->db2->select("BOMNo, Name, IPCd")->get_where('BOM_Dish', array('BOMDishTyp' => 2))->result_array();		}	public function getBOMItems(){		return $this->db2->select("BOMNo, ItemId, Name, IPCd")->get_where('BOM_Dish', array('BOMDishTyp' => 1))->result_array();		}	public function get_item_portion(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("IPCd, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")->get('ItemPortions')->result_array();		}	public function get_item_name_list($name){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";        $cname = "Name$langId";		$item_name = $name.'%';		return $this->db2->query("SELECT ItemId, (case when $lname != '-' Then $lname ELSE Name1 end) as ItemNm FROM `MenuItem` WHERE EID = $EID and  LOWER($cname) LIKE '$item_name'")->result_array();	}	public function getKotList($MCNo, $mergeNo, $FKOTNo, $KOTNo){		$EID = authuser()->EID;		$EType = $this->session->userdata('EType');		$stat = ($EType == 5)?3:2;		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";        $ipname = "ip.Name$langId";        $KitName = "ek.Name$langId";         return $this->db2->select("k.ItemId, k.MCNo, (case when $lname != '-' Then $lname ELSE m.Name1 end) as ItemNm, k.CustItemDesc,k.CustRmks, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Portions, sum(k.Qty) Qty, k.TableNo,k.MergeNo, k.KOTNo, k.FKOTNo,k.KitCd, (case when $KitName != '-' Then $KitName ELSE ek.Name1 end) as KitName, k.UKOTNo,k.LstModDt,k.TA,k.EDT, k.OType, k.langId")        					->order_by('k.FKOTNo, m.Name1, ek.Name1, k.UKOTNo, k.FKOTNo', 'ASC')        					->group_by('ek.Name1, k.ItemId, k.KOTNo, k.FKOTNo, k.Itm_Portion, k.CustItemDesc, k.TA, k.CustRmks')         					->join('MenuItem m','m.ItemId = k.ItemId','inner')         					->join('ItemPortions ip','ip.IPCd = k.Itm_Portion','inner')         					->join('Eat_Kit ek', 'ek.KitCd=k.KitCd', 'inner')        					// ->where($or_where)        					// ->where_not_in('k.Stat', array(4,6,7,99))        					->get_where('Kitchen k', array(        											'k.EID' => $EID,        											'k.MCNo' => $MCNo,        											'k.MergeNo' => $mergeNo,        											'k.KOTNo' => $KOTNo,        											'k.Stat' => $stat)        								)        					->result_array();        						}	public function getBillDetailsForSettle($custId, $MCNo, $mergeNo){			$EID = authuser()->EID;			$langId = $this->session->userdata('site_lang');            $cpname = "cp.Name$langId";			return $this->db2->select("b.TableNo,b.MergeNo, b.BillId, b.BillNo, DATE_FORMAT(DATE(billTime),'%d/%m/%Y') as BillDate, b.TotAmt as BillValue, b.PaidAmt, bp.PaymtMode, bp.TotBillAmt, bp.PymtType, bp.PaidAmt as bpPaidAmt, b.CNo, u.CustId, (case when $cpname != '' Then $cpname ELSE 'Unpaid' end) as pymtName,b.payRest")						->order_by('BillId', 'ASC')						->group_by('BillId')						->join('Eat_tables et','b.EID = et.EID','inner')						->join('BillPayments bp','bp.BillId = b.BillId','left')						->join('Users u','b.CustId=u.CustId','inner')						->join('ConfigPymt cp','cp.PymtMode=bp.PaymtMode','left')						->get_where('Billing b', array('b.EID' => $EID,														'b.MergeNo' => $mergeNo,														'b.CNo' => $MCNo,														'b.CustId' => $custId												)								   )						->result_array();            	}	public function getBillingData($from, $to){			$from  = date('Y-m-d', strtotime($from));			$to = date('Y-m-d', strtotime("+1 day", strtotime($to)));			$EID = authuser()->EID;			$langId = $this->session->userdata('site_lang');            $cpname = "cp.Name$langId";			$billData = $this->db2->select("b.TableNo, b.BillId, b.BillNo, b.billTime as BillDate, b.CellNo,b.CustId,b.TotAmt,b.PaidAmt bPaidAmt, bp.MergeNo, bp.PaidAmt, bp.OrderRef, bp.PymtRef, bp.PaymtMode, bp.PymtType, bp.Stat, bp.PymtDate, (case when $cpname != '-' Then $cpname ELSE cp.Name1 end) as Name, cp.Company")					->order_by('b.BillId', 'DESC')					->join('BillPayments bp','bp.BillId = b.BillId','left')					->join('ConfigPymt cp','cp.PymtMode = bp.PaymtMode','left')					->get_where('Billing b', array('b.EID' => $EID,						'b.billTime >=' => $from,						'b.billTime <=' => $to								))					->result_array();             return $billData;	}	public function getPendingKOTLIST($minutes, $kitcd){		$EID = authuser()->EID;		if(!empty($minutes)){			$whr = ' TIMEDIFF(CURRENT_TIME(), k.EDT) < '.$minutes;			$this->db2->where($whr);		}		// if(!empty($kitcd)){		// 	$this->db2->where('k.KitCd', $kitcd);		// }		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";        $ipname = "ip.Name$langId";		return $this->db2->select("k.CNo, k.OrdNo,k.EDT,k.KitCd,k.KStat, k.KOTNo, k.FKOTNo, k.ItemId, k.Qty, k.CustItemDesc, k.Itm_Portion, k.TableNo,k.MergeNo,k.CustRmks,k.TA,k.LstModDt,k.OType, (case when $lname != '-' Then $lname ELSE m.Name1 end) as ItemNm, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Portions")						  ->order_by('k.KOTNo, k.FKOTNo', 'ASC')						  ->group_by('k.KitCd, k.KOTNo, k.FKOTNo, k.ItemId, k.CustItemDesc, k.Itm_Portion,k.CustRmks,k.TA')						  ->join('MenuItem m','m.ItemId = k.ItemId','inner')         				  ->join('ItemPortions ip','ip.IPCd = k.Itm_Portion','inner')         				  ->get_where('Kitchen k', array(						  						'k.EID' => $EID,						  						'k.KStat' => 0,						  						'k.Stat' => 3,						  						'k.KitCd' => $kitcd						  							)									)						  ->result_array();						  		// unique value		$group_arr = [];		foreach ($data as $key ) {			$kot = $key['FKOTNo'];			if(!isset($group_arr[$kot])){				$group_arr[$kot] = [];			}			array_push($group_arr[$kot], $key);		}		echo "<pre>";		print_r($group_arr);		die;		return $data;	}	public function getPendingItemLIST($kitCd){		$EID = authuser()->EID;		if(!empty($kitCd)){			$this->db2->where('k.KitCd', $kitCd);		}		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";        $ipname = "ip.Name$langId";		return $this->db2->select("k.ItemId, sum(k.Qty) as Qty, k.CustItemDesc, k.Itm_Portion, k.TableNo,k.MergeNo,k.CustRmks,k.TA,k.LstModDt,k.OType, (case when $lname != '-' Then $lname ELSE m.Name1 end) as ItemNm, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Portions")						  ->order_by('Qty, m.Name1', 'DESC')						  ->group_by('k.KitCd,k.ItemId')						  ->join('MenuItem m','m.ItemId = k.ItemId','inner')         				  ->join('ItemPortions ip','ip.IPCd = k.Itm_Portion','inner')         				  ->get_where('Kitchen k', array(						  						'k.EID' => $EID,						  						'k.KStat' => 0,						  						'k.Stat' => 3						  							)									)						  ->result_array();	}	public  function getTAPendingBills($TableNo)	{		return $this->db2->select('b.BillId,b.BillNo, b.billTime,b.PaidAmt, b.CellNo,b.OType,b.TableNo,b.CNo,b.EID, b.MergeNo,b.CustId, k.FKOTNo, k.KOTNo')						->order_by('b.BillId', 'ASC')						->group_by('b.BillId')						->join('Kitchen k','k.MCNo = b.CNo', 'inner')						->get_where('Billing b', array(											'b.payRest' => 0,											'b.LoginCd' => authuser()->RUserId,											'b.EID' => authuser()->EID,											'k.TableNo' => $TableNo											))						->result_array();	}	public function getUserList(){		return $this->db2->select("ur.*, ut.UTypName, rt.UTypName as designation")						->join('UserType ut', 'ut.UTyp = ur.UTyp', 'inner')						->join('UserType rt', 'rt.UTyp = ur.RestRole', 'left')						->get_where('UsersRest ur', 							array('ur.EID' => authuser()->EID, 'ur.RUserId >' => 1 ))						->result_array();	}	public function getusersRestData(){		// 'ur.RUserId >' => 1 		$EID = authuser()->EID;		return $this->db2->select('ur.RUserId, ur.FName, ur.LName, ur.MobileNo, ut.UTypName')						->join('UserType ut', 'ut.UTyp = ur.RestRole', 'left')						->get_where('UsersRest ur', 							array('ur.EID' => $EID, 'ur.Stat' => 0 ))						->result_array();  		}	public function getCasherList(){				$RUserId = authuser()->RUserId;		$EID = authuser()->EID;        $data = array();		$GetCCD = $this->db2->get_where('UsersRoleDaily', array('RUserId' => $RUserId))->row_array();		if(!empty($GetCCD)){			$langId = $this->session->userdata('site_lang');			$cashName = "Name$langId";	        if(!empty($GetCCD['CCd'])){	        	$ccd = "(".$GetCCD['CCd'].")";				$data = $this->db2->query("SELECT CCd, (case when $cashName != '-' Then $cashName ELSE Name1 end) as Name, PrinterName FROM Eat_Casher Where EID = $EID AND Stat = 0 and CCd in $ccd")->result_array();	        }		}        return $data;	}	public function getCashierList(){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');		$cashName = "Name$langId";        return $this->db2->select("CCd, (case when $cashName != '-' Then $cashName ELSE Name1 end) as Name, PrinterName")->get_where('Eat_Casher', array('EID' => $EID, 'Stat' => 0))->result_array();	}	public function getKitchenList(){				$RUserId = authuser()->RUserId;		$EID = authuser()->EID;        $data = array();		$GetKitCd = $this->db2->get_where('UsersRoleDaily', array('RUserId' => $RUserId))->row_array();		if(!empty($GetKitCd)){			$langId = $this->session->userdata('site_lang');        	$kname = "Name$langId";	        if(!empty($GetKitCd['KitCd'])){	        	$KitCd = "(".$GetKitCd['KitCd'].")";				$data = $this->db2->query("SELECT KitCd, (case when $kname != '-' Then $kname ELSE Name1 end) as KitName FROM Eat_Kit Where EID = $EID AND Stat = 0 and KitCd in $KitCd")->result_array();	        }		}        return $data;	}	public function getCTypeList(){		$langId = $this->session->userdata('site_lang');        $lname = "Usedfor$langId";		return $this->db2->select("CTyp, (case when $lname != '-' Then $lname ELSE Name1 end) as Usedfor")					->order_by('Rank', 'ASC')					->group_by('Usedfor1')					->get_where('FoodType', array('Stat' => 0))					->result_array();	}		public function getWeekDayList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("DayNo, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")					->get('WeekDays')					->result_array();		}	public function getMenuTagList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("TagId, (case when $lname != '-' Then $lname ELSE Name1 end) as TDesc, TagTyp")					->order_by('TagId', 'ASC')					->get('MenuTags')					->result_array();		}	public function getItemSaleList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("TagId, (case when $lname != '-' Then $lname ELSE Name1 end) as TDesc, TagTyp")					->get_where('MenuTags', array('TagTyp' => 3))					->result_array();		}	public function getTransactionType(){		$langId = $this->session->userdata('site_lang');        $lname = "st.Name$langId";        $userId = authuser()->RUserId;		return $this->db2->select("st.TagId, (case when $lname != '-' Then $lname ELSE st.Name1 end) as TDesc, st.TagTyp")					->join('stockTransAccess sta', 'sta.TagId=st.TagId', 'inner')					->get_where('stockTrans st', array('st.TagTyp' => 1, 'st.Stat' => 0, 'sta.UserId' => $userId))					->result_array();		}	public function getUOMlist(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("UOMCd, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")                              ->get_where('RMUOM', array('Stat' => 0))                              ->result_array();	}	public function getSupplierList(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SuppCd, CreditDays, (case when $lname != '-' Then $lname ELSE Name1 end) as SuppName, Remarks")                              ->get_where('RMSuppliers', array('Stat' => 0, 'EID' => authuser()->EID))                              ->result_array();		}	public function getSuppliers(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("SuppCd, CreditDays, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Remarks, Stat")                              ->get('RMSuppliers')                              ->result_array();		}	public function getFromMast($type){		return $this->db2->get_where('Masts', array('MstTyp' => $type, 'EID' => authuser()->EID))->result_array();	}	public function getFromMastIn(){		return $this->db2->select("*")						->order_by('MstTyp, Name', 'ASC')						->where_in('MstTyp', array(1,3,4))						->get_where('Masts', array('EID' => authuser()->EID))						->result_array();	}	public function getRMItemUOM(){		$langId = $this->session->userdata('site_lang');        $rmname = "rm.Name$langId";		return $this->db2->select("rm.*, (case when $rmname != '-' Then $rmname ELSE rm.Name1 end) as RMName")					->group_by('RMCd')					->join('RMCatg rc','rm.RMCatg = rc.RMCatgCd','inner')					->join('RMItemsUOM riu', 'rm.RMCd = riu.RMCd', 'inner')					->join('RMUOM ru', 'ru.UOMCd = riu.UOMCd', 'inner')					->get_where('RMItems rm', array(												'rm.Stat' => 0,												'rm.EID' => authuser()->EID,												'rm.ItemId' => 0												)								)					->result_array();	}	public function getRMStockDetList($TransId, $ToID){		$ttyp = 1;		if($ToID == 13){			$ttyp = 2;		}		return $this->db2->get_where('RMStockDet', array('TransId' => $TransId, 'Stat' => 0, 'TTyp' => $ttyp))->result_array();	}	public function getDispenseOutletList(){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        $dispName = "Name$langId";        return $this->db2->select("DCd, (case when $dispName != '-' Then $dispName ELSE Name1 end) as Name, Stat")->get_where('Eat_DispOutlets', array('EID' => $EID))->result_array();	}	public function getCashier(){		$langId = $this->session->userdata('site_lang');        $name = "Name$langId";        return $this->db2->select("CCd, (case when $name != '-' Then $name ELSE Name1 end) as Name, PrinterName, PrintIP, Stat")->get_where('Eat_Casher', array('EID' => authuser()->EID))                    ->result_array();    }    public function getEatStore(){		$langId = $this->session->userdata('site_lang');        $name = "Name$langId";        return $this->db2->select("STId, (case when $name != '-' Then $name ELSE Name1 end) as Name, Stat")->get_where('Eat_Store', array('EID' => authuser()->EID))                    ->result_array();    }	public function getAllTables(){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');		$section = "es.Name$langId";		$cashier = "ec.Name$langId";		$whr = "et.EID = ec.EID";		return $this->db2->select("et.*, (case when $section != '-' Then $section ELSE es.Name1 end) as sectionName, (case when $cashier != '-' Then $cashier ELSE ec.Name1 end) as cashierName")					// ->order_by()					->join('Eat_Sections es', 'es.SecId = et.SecId', 'inner')					->join('Eat_Casher ec', 'ec.CCd = et.CCd', 'inner')					->where($whr)					->get_where('Eat_tables et', array('et.EID' => $EID, 'et.TblTyp <' => 100))					->result_array();	}	public function getAllMenuList(){        $langId = $this->session->userdata('site_lang');        $lname = "ur.Name$langId";		return $this->db2->select("ur.RoleId, (case when $lname != '-' Then $lname ELSE ur.Name1 end) as LngName, ur.RoleTyp, ur.pageUrl, ur.Rank, ur.PhpPage, ur.Stat, ur.Title")                        ->order_by('ur.Rank', 'ASC')                        ->get('UserRoles ur')                        ->result_array();	}	public function getRecommendationList(){        $langId = $this->session->userdata('site_lang');        $lname = "mi.Name$langId";        $recName = "mii.Name$langId";		return $this->db2->select("mr.RecNo, mr.ItemId, (case when $lname != '-' Then $lname ELSE mi.Name1 end) as ItemNm, mr.RcItemId, (case when $recName != '-' Then $recName ELSE mii.Name1 end) as recName, mr.Stat, mr.Remarks")                        ->join('MenuItem mi', 'mi.ItemId = mr.ItemId','inner')                        ->join('MenuItem mii', 'mii.ItemId = mr.RcItemId','inner')                        ->get_where('MenuItem_Recos mr', array('mr.EID' => authuser()->EID))                        ->result_array();	}	public function getPaymentType(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";        return $this->db2->select("PMNo, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Rank, Stat")        				->order_by('Rank', 'ASC')        				->get('PymtModes')        				->result_array();	}	public function getEntertainment(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";        return $this->db2->select("EntId, (case when $lname != '-' Then $lname ELSE Name1 end) as Name, Stat")        				->get('Entertainment')        				->result_array();	}	public function getItemTypesGroupList(){		$langId = $this->session->userdata('site_lang');        $iname = "itg.Name$langId";        $itname = "it.Name$langId";        $lname = "mi.Name$langId";        return $this->db2->select("itg.*, (case when $iname != '-' Then $iname ELSE itg.Name1 end) as Name, (case when $itname != '-' Then $itname ELSE it.Name1 end) as itemTypeName, (case when $lname != '-' Then $lname ELSE mi.Name1 end) as ItemNm")        				->join('MenuTags it', 'it.TagId = itg.ItemTyp', 'inner')        				->join('MenuItem mi', 'mi.ItemId = itg.ItemId', 'left')        				->get_where('ItemTypesGroup itg' , array('itg.EID' => authuser()->EID))        				->result_array();	}	public function getItemTypesGroup(){		$langId = $this->session->userdata('site_lang');        $iname = "itp.Name$langId";        return $this->db2->select("itp.*, (case when $iname != '-' Then $iname ELSE itp.Name1 end) as Name")        				->get_where('ItemTypesGroup itp', array('itp.Stat' => 0, 'itp.EID' => authuser()->EID))        				->result_array();	}	public function getItemTypesDet(){				$langId = $this->session->userdata('site_lang');        $groupName = "itp.Name$langId";        $menuName = "mi.Name$langId";        return $this->db2->select("itd.*, (case when $groupName != '-' Then $groupName ELSE itp.Name1 end) as groupName, (case when $menuName != '-' Then $menuName ELSE mi.Name1 end) as menuName")        			->join('ItemTypesGroup itp', 'itp.ItemGrpCd = itd.ItemGrpCd', 'inner')        			->join('MenuItem mi', 'mi.ItemId = itd.ItemId', 'inner')        			->get_where('ItemTypesDet itd' , array('itd.EID' => authuser()->EID))        			->result_array();			}	public function getMenuItemRates($data){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        $ipname = "ip.Name$langId";		return $this->db2->select("ip.IPCd, mir.OrigRate, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Name")						->order_by('ItmRate', 'ASC')						->join('MenuItemRates mir', 'mir.ItemId = mi.ItemId', 'inner')						->join('ItemPortions ip', 'ip.IPCd = mir.Itm_Portion', 'inner')						->join('Eat_tables et', 'et.SecId = mir.SecId', 'inner')						->get_where('MenuItem mi', array(							'mi.ItemId' => $data['itemId'],							'mir.EID' => $EID,							'et.TableNo' => $data['TableNo'])								)						->result_array();	}	public function getItemRatesByItemId($ItemId){		$langId = $this->session->userdata('site_lang');        $ipname = "ip.Name$langId";        $sectName = "es.Name$langId";				return $this->db2->select("mir.*, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Portions, (case when $sectName != '-' Then $sectName ELSE es.Name1 end) as Section")						->join('ItemPortions ip', 'ip.IPCd = mir.Itm_Portion', 'inner')						->join('Eat_Sections es', 'es.SecId = mir.SecId', 'inner')						->get_where('MenuItemRates mir', array('mir.EID' => authuser()->EID, 'mir.ItemId' => $ItemId))						->result_array();	}	public function getItemOfferList($postData){				$EID 			= authuser()->EID;	    $ItemId 		= $postData['ItemId'];	    $cid 			= $postData['CID'];	    $itemTyp 		= $postData['ItemTyp'];	    $MCatgId 		= $postData['MCatgId'];	    $itemPortion 	= $postData['Itm_Portion'];	    $itmSale 		= $postData['ItemSale'];	    if(!empty($ItemId)){	    	$this->db2->or_where('cod.ItemId', $ItemId);	    }	    	    if(!empty($itmSale)){	    	$this->db2->or_where('cod.ItemSale', $itmSale);	    }	    if(!empty($itemPortion)){	    	$this->db2->or_where('cod.IPCd', $itemPortion);	    }	    if(!empty($itemTyp)){	    	$this->db2->or_where('cod.ItemTyp', $itemTyp);	    }	    $langId 	= $this->session->userdata('site_lang');    	$scName 	= "c.SchNm$langId";    	$scDesc 	= "cod.SchDesc$langId";    	$menuName 		= "mi.Name$langId";    	$discName 	= "mii.Name$langId";	    		$whr = "(time(Now()) BETWEEN c.FrmTime and c.ToTime OR time(Now()) BETWEEN c.AltFrmTime AND c.AltToTime) and (date(Now()) BETWEEN c.FrmDt and c.ToDt)";		return $this->db2->select("(case when $scName != '-' Then $scName ELSE c.SchNm1 end) as SchNm, c.SchCd, cod.SDetCd, (case when $scDesc != '-' Then $scDesc ELSE cod.SchDesc1 end) as SchDesc, c.PromoCode, c.SchTyp, c.Rank, cod.Disc_ItemId, (case when $discName != '-' Then $discName ELSE mii.Name1 end) as discName, cod.Qty, cod.Disc_Qty, cod.IPCd, cod.Disc_IPCd, cod.Rank, cod.DiscItemPcent, cod.Disc_pcent, cod.Disc_Amt, cod.CID, cod.MCatgId, cod.ItemTyp, cod.ItemId, (case when $menuName != '-' Then $menuName ELSE mi.Name1 end) as menuName, mii.KitCd, mii.PckCharge, m.TaxType, mii.PrepTime, m.DCd, mii.FID, mir.OrigRate as itmVal, mirr.OrigRate as disItmVal ")				->order_by('c.Rank, cod.Rank')				->group_by('c.schcd, cod.sDetCd')				->where($whr)				->join('CustOffersDet cod','c.SchCd= cod.SchCd', 'inner')				->join('MenuCatg m','m.MCatgId = cod.MCatgId', 'left')				->join('MenuItem mi','mi.ItemId = cod.ItemId', 'left')				->join('MenuItemRates mir','mir.ItemId = cod.ItemId', 'left')				->join('MenuItem mii','mii.ItemId = cod.Disc_ItemId', 'left')				->join('MenuItemRates mirr','mirr.ItemId = cod.Disc_ItemId', 'left')				->get_where('CustOffers c', array(										'c.EID' => $EID,										'c.Stat' => 0,										'cod.Stat' => 0,										'c.SchTyp' => 2										)							)				->result_array();	}	public function getCustomItemsList($postData){		$EID = authuser()->EID;		$FID = $postData['FID'];		$ItemId = $postData['ItemId'];		$ItemTyp = $postData['ItemTyp'];		$Itm_Portion =$postData['Itm_Portion'];	    $whr = '';    	if($FID == 1){    		$whr = "mii.FID = $FID";    	}else if($FID == 2){    		$whr = "(mii.FID = 1 or mii.FID = 2)";    	}    	$langId = $this->session->userdata('site_lang');    	$ItemGrpName = "mi.Name$langId";        $ItemNm = "mii.Name$langId";        if($ItemTyp == 1){            return $this->db2->select("itg.GrpType, itd.ItemGrpCd, itd.ItemOptCd, (case when $ItemGrpName != '-' Then $ItemGrpName ELSE mi.Name1 end) as ItemGrpName, itd.ItemId, (case when $ItemNm != '-' Then $ItemNm ELSE mii.Name1 end) as Name, mir.OrigRate as Rate, itg.Reqd, itg.CalcType")            		->order_by('itg.Rank, itd.Rank', 'ASC')            		->join('ItemTypesDet itd', 'itg.ItemGrpCd = itd.ItemGrpCd', 'inner')            		->join('MenuItem mi', 'mi.ItemId = itg.ItemId', 'inner')            		->join('MenuItem mii', 'mii.ItemId = itd.ItemId', 'inner')            		->join('MenuItemRates mir', 'mir.ItemId = mii.ItemId', 'inner')            		->where($whr)            		->get_where('ItemTypesGroup itg', array(            							'itg.EID' => $EID,            							'itg.Stat' => 0,            							'itg.ItemId' => $ItemId,            							'mir.Itm_Portion' => $Itm_Portion,            							'itg.ItemTyp' => 1            									)            					)            		->result_array();                    }else{        	$ItemGrpName = "itg.Name$langId";            return $this->db2->select("itg.GrpType, itd.ItemGrpCd, itd.ItemOptCd, (case when $ItemGrpName != '-' Then $ItemGrpName ELSE itg.Name1 end) as ItemGrpName, itd.ItemId, (case when $ItemNm != '-' Then $ItemNm ELSE mii.Name1 end) as Name, mir.OrigRate as Rate, itg.Reqd, itg.CalcType")            		->order_by('itg.Rank, itd.Rank', 'ASC')            		->join('ItemTypesDet itd', 'itg.ItemGrpCd = itd.ItemGrpCd', 'inner')            		->join('MenuItem mi', 'mi.ItemId = itg.ItemId', 'left')            		->join('MenuItem mii', 'mii.ItemId = itd.ItemId', 'inner')            		->join('MenuItemRates mir', 'mir.ItemId = mii.ItemId', 'inner')            		->where($whr)            		->get_where('ItemTypesGroup itg', array(            							'itg.EID' => $EID,            							'itg.Stat' => 0,            							'mir.Itm_Portion' => $Itm_Portion,            							'itg.ItemTyp' => $ItemTyp            									)            					)            		->result_array();            		print_r($this->db2->last_query());die;        }	}	public function getABCRepots($dt){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        if(!empty($dt['cuisine'])){        	$this->db2->where('mi.CID', $dt['cuisine']);        }        if(!empty($dt['menucat'])){        	$this->db2->where('mi.MCatgId', $dt['menucat']);        }        if(!empty($dt['itemId'])){        	$this->db2->where('mi.ItemId', $dt['itemId']);        }        if(!empty($dt['fromDate'])){        	$this->db2->where('k.LstModDt >=', date('Y-m-d',strtotime($dt['fromDate'])));        }        if(!empty($dt['toDate'])){        	$this->db2->where('k.LstModDt <=', date('Y-m-d',strtotime($dt['toDate'])));        }        $ItemName = "mi.Name$langId";        $CuisineName = "c.Name";        $menuCatName = "mc.Name$langId";		return $this->db2->select("k.ItemId, sum(k.Qty) as Quantity, (case when $ItemName != '-' Then $ItemName ELSE mi.Name1 end) as ItemName, (case when $CuisineName != '-' Then $CuisineName ELSE c.Name end) as CuisineName, (case when $menuCatName != '-' Then $menuCatName ELSE mc.Name1 end) as menuCatName, sum(k.ItmRate) as Amount ")					->order_by("c.Name1, mc.Name1, sum(k.Qty)", "DESC")					->group_by('k.ItemId')					->join('MenuItem mi', 'mi.ItemId = k.ItemId', 'inner')					->join('Cuisines c', 'c.CID = mi.CID', 'inner')					->join('MenuCatg mc', 'mc.MCatgId = mi.MCatgId', 'inner')					->get_where('Kitchen k', array(							'k.Stat' => 3, 							'k.EID' => $EID							)						)					->result_array();	}	public function getTaxHead(){		$langId = $this->session->userdata('site_lang');        $taxName = "Name$langId";		return $this->db2->select("TaxName, (case when $taxName != '-' Then $taxName ELSE Name1 end) as taxName, TaxPcent, concat(TaxName, '@', TaxPcent) as header")->get_where('Tax', array('Stat' => 0))		->result_array();	}	public function getTaxRepots($dt){		$EID = authuser()->EID;        if(!empty($dt['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($dt['fromDate'])));        }        if(!empty($dt['toDate'])){        	$this->db2->where('b.billTime <=', date('Y-m-d',strtotime($dt['toDate'])));        }		return $this->db2->select("b.BillId, date(b.billTime) as Date, t.TaxName,t.TaxPcent, bt.TaxAmt, t.TaxType")					// ->order_by("b.BillId", "DESC")					->group_by('b.BillId, t.TaxName')					->join('BillingTax bt', 'bt.BillId = b.BillId', 'inner')					->join('Tax t', 't.TaxType = bt.TaxType', 'inner')					->get_where('Billing b', array(							'b.EID' => $EID							)						)					->result_array();	}	public function getIncomeRepots($dt){		$EID = authuser()->EID;        if(!empty($dt['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($dt['fromDate'])));        }        if(!empty($dt['toDate'])){        	$to = date('Y-m-d', strtotime("+1 day", strtotime($dt['toDate'])));        	$this->db2->where('b.billTime <=', $to);        }       return $this->db2->select("DAYNAME(b.billTime) as dayName, DATE_FORMAT(date(b.billTime), '%d-%b-%y') as Date, count(b.BillId) as totalInvoice, sum(b.TotItemDisc + b.BillDiscAmt + b.RtngDiscAmt + b.custDiscAmt) as totalDiscount, sum(b.PaidAmt) as totalAmount")					->order_by('date(b.billTime)', 'DESC')					->group_by('date(b.billTime)')					->get_where('Billing b', array(							'b.EID' => $EID							)						)					->result_array();						}	public function getStockStatementRepots($dt){		$EID = authuser()->EID;        $TransDt = $dt['TransDt'];		$openBalDt = date('Y-m-d', strtotime("-1 day", strtotime($TransDt)));        $KitCd = $dt['KitCd'];        $langId = $this->session->userdata('site_lang');        $lname = "mi.Name$langId";        // current date transaction         $current = $this->db2->query("select mi.ItemId, (case when $lname != '-' Then $lname ELSE mi.Name1 end) as ItemNm, IFNULL((select sum(rsd1.Qty) from RMStockDet rsd1, RMStock rms1, RMItems rmi where rsd1.TransId=rms1.TransId and rms1.TransType > 10 and rsd1.Stat = 0 and rsd1.RMCd= rmi.RMCd and rmi.ItemId = mi.ItemId and (rms1.FrmID = $KitCd or rms1.toID = $KitCd) and rms1.EID = $EID and rmi.EID = $EID and rms1.TransDt = '$TransDt' group by rsd1.RMCd ),0) as received, IFNULL((select sum(rsd1.Qty)  from RMStockDet rsd1, RMStock rms1, RMItems rmi where rsd1.TransId=rms1.TransId and rms1.TransType < 10 and rsd1.Stat = 0 and rsd1.RMCd= rmi.RMCd and rmi.ItemId = mi.ItemId and (rms1.FrmID = $KitCd or rms1.toID = $KitCd) and rms1.EID = $EID and rmi.EID = $EID and rms1.TransDt = '$TransDt' group by rsd1.RMCd),0) as issued, IFNULL((select ( k.Qty ) from Kitchen k, RMItems rmi where k.ItemId = mi.ItemId and k.EID = $EID and k.Stat = 3 and k.ItemId = rmi.ItemId and k.LstModDt = '$TransDt' group by k.ItemId),0) as consumed from MenuItem mi, RMItems rmi1  where mi.ItemId = rmi1.ItemId and mi.EID = $EID ")        ->result_array();        // print_r($this->db2->last_query());die;        // opening balance         $open = $this->db2->query("select mi.ItemId, (case when $lname != '-' Then $lname ELSE mi.Name1 end) as ItemNm, IFNULL((select sum(rsd1.Qty) from RMStockDet rsd1, RMStock rms1, RMItems rmi where rsd1.TransId=rms1.TransId and rms1.TransType > 10 and rsd1.Stat = 0 and rsd1.RMCd= rmi.RMCd and rmi.ItemId = mi.ItemId and (rms1.FrmID = $KitCd or rms1.toID = $KitCd) and rms1.EID = $EID and rmi.EID = $EID and rms1.TransDt <= '$openBalDt' group by rsd1.RMCd ),0) as received, IFNULL((select sum(rsd1.Qty)  from RMStockDet rsd1, RMStock rms1, RMItems rmi where rsd1.TransId=rms1.TransId and rms1.TransType < 10 and rsd1.Stat = 0 and rsd1.RMCd= rmi.RMCd and rmi.ItemId = mi.ItemId and (rms1.FrmID = $KitCd or rms1.toID = $KitCd) and rms1.EID = $EID and rmi.EID = $EID and rms1.TransDt <= '$openBalDt' group by rsd1.RMCd),0) as issued, IFNULL((select ( k.Qty ) from Kitchen k, RMItems rmi where k.ItemId = mi.ItemId and k.EID = $EID and k.Stat = 3 and k.ItemId = rmi.ItemId and k.LstModDt <= '$openBalDt' group by k.ItemId),0) as consumed from MenuItem mi, RMItems rmi1  where mi.ItemId = rmi1.ItemId and mi.EID = $EID ")        ->result_array();        $temp = [];        $data = [];        foreach ($open as $op) {        	foreach ($current as $cur) {        		if($op['ItemId'] == $cur['ItemId']){        			$temp['ItemId'] 	= $cur['ItemId'];        			$temp['ItemNm'] 	= $cur['ItemNm'];        			$temp['opening'] 	= $op['received'] - $op['issued'] - $op['consumed'];        			$temp['received'] 	= $cur['received'];        			$temp['issued'] 	= $cur['issued'];        			$temp['consumed'] 	= $cur['consumed'];        			$temp['closed'] 	= $temp['opening'] +$cur['received'] - $cur['issued'] - $cur['consumed'];        			$data[] = $temp;        		}        	}	        }        return $data;	}	public function getUserDiscount(){		$langId = $this->session->userdata('site_lang');		$lname = "Name$langId";		return $this->db2->select("*, (case when $lname != '-' Then $lname ELSE Name1 end) as name")->get_where('discounts', array('stat' => 0, 'EID' => authuser()->EID))		->result_array();	}	public function getThemeListName(){		$EID = authuser()->EID;		return $this->db2->select("ThemeId, themeName")->get_where('ConfigTheme', array('EID' => $EID))		->result_array();	}	public function getThemeList(){		$EID = authuser()->EID;		return $this->db2->select("*")->get_where('ConfigTheme', array('Stat' => 1, 'EID' => $EID))		->row_array();	}	public function getThemeData($ThemeId){		$EID = authuser()->EID;		return $this->db2->select("*")->get_where('ConfigTheme', array('ThemeId' => $ThemeId, 'EID' => $EID))		->row_array();		}	public function getSettledBillNotCollectPymnt($data){		if(!empty($data['mobile'])){			$this->db2->where('b.CellNo', $data['mobile']);		}		if(!empty($data['fullname'])){			$this->db2->like('u.FName', $data['fullname']);			// $this->db2->like('u.LName', $data['fullname']);		}		$EID = authuser()->EID;		return $this->db2->select("b.CustId, b.CellNo, CONCAT_WS(' ', u.FName, u.LName) as Fullname, (sum(bp.TotBillAmt) - sum(bp.PaidAmt)) as TotalAmt, c.custType")						->order_by('b.BillId', 'ASC')						->group_by('b.CustId')						->join('Users u', 'u.CustId = b.CustId', 'inner')						->join('BillPayments bp', 'bp.BillId = b.BillId', 'inner')						->join('CustList c', 'c.CustId = b.CustId', 'left')						->get_where('Billing b', array(											'b.Stat' => 25,									 		'b.EID' => $EID,									 		'c.EID' => $EID,									 		'bp.EID' => $EID)									)		->result_array();		}	public function getBillingByCustId($CustId){		$EID = authuser()->EID;		return $this->db2->query("SELECT b.BillId, b.CustId, b.CellNo, b.CNo, b.MergeNo, b.PaidAmt, DATE_FORMAT(b.billTime, '%d-%b-%Y - %H:%i') as billTime, ((b.PaidAmt ) - sum(bp.PaidAmt)) as totalBillPaidAmt 			FROM `Billing` `b`, BillPayments bp			WHERE `b`.`Stat` = 25			AND `b`.`EID` = $EID			AND `b`.`CustId` = $CustId            and bp.BillId = b.BillId and bp.EID=b.EID            GROUP by bp.BillId			ORDER BY `b`.`BillId` ASC")->result_array();		// return $this->db2->query("SELECT b.BillId, b.CustId, b.CellNo, b.CNo, b.MergeNo, b.PaidAmt, DATE_FORMAT(b.billTime, '%d-%b-%Y - %H:%i') as billTime, IFNULL(bp.PaidAmt - (SELECT IFNULL(sum(bp.PaidAmt), 0) From BillPayments bp, Billing b1 where bp.BillId = b1.BillId and bp.EID=b1.EID and b1.BillId = b.BillId and b1.EID = b.EID group by bp.EID, bp.BillId ,b1.EID, b1.BillId),b.PaidAmt) as totalBillPaidAmt		// 	FROM `Billing` `b`		// 	WHERE `b`.`Stat` = 25		// 	AND `b`.`EID` = $EID		// 	AND `b`.`CustId` = $CustId		// 	ORDER BY `b`.`BillId` ASC")->result_array();	}	public function getCustAccounts($billId){		$EID = authuser()->EID;		return $this->db2->get_where('custAccounts', array('EID' => $EID, 'billId' => $billId))->row_array();	}	public function getOnaccountsData(){		$EID = authuser()->EID;		return $this->db2->query("SELECT b.CustId, b.CellNo, CONCAT_WS(' ', u.FName, u.LName) as Fullname, b.PaidAmt, b.billTo, DATE_FORMAT(b.billTime, '%d-%b-%Y - %H:%i') as billTime, IFNULL(sum(b.PaidAmt) - (SELECT IFNULL(sum(bp.PaidAmt), 0) From BillPayments bp, Billing b1 where bp.BillId = b1.BillId and bp.EID=b1.EID and b1.BillId = b.BillId and b1.EID = b.EID group by bp.EID, bp.BillId ,b1.EID, b1.BillId),b.PaidAmt) as totalBillPaidAmt			FROM Billing b Inner join Users u on u.CustId = b.CustId			WHERE b.Stat = 25			AND b.EID = $EID			Group by b.CustId			ORDER BY b.BillId ASC")					->result_array();	}		public function getSalesSummary($dt){		$EID = authuser()->EID;		if(!empty($dt['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($dt['fromDate'])));        }        if(!empty($dt['toDate'])){        	$this->db2->where('b.billTime <=', date('Y-m-d',strtotime($dt['toDate'])));        }		return $this->db2->select("DAYNAME(b.billTime) as dayName, DATE_FORMAT(DATE(b.billTime), '%d-%b-%Y') as billTime, sum(b.PaidAmt) as billAmt, sum(b.TotPckCharge) as TotPckCharge, sum(DelCharge) as DelCharge, sum(b.SerCharge) as SerCharge, sum(b.Tip) as tips, sum(b.TotItemDisc + b.BillDiscAmt + b.RtngDiscAmt + b.custDiscAmt) as Discounts")						->order_by('b.billTime', 'ASC')						->group_by('date(b.billTime)')						->where_in('b.Stat', array(1,5,25))						->get_where('Billing b', array('b.EID' => $EID))						->result_array();	}	public function getSalesRepots($pData){				if(!empty($pData['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($pData['fromDate'])));        }        if(!empty($pData['toDate'])){        	$this->db2->where('b.billTime <=', date('Y-m-d',strtotime($pData['toDate'])));        }        if(!empty($pData['orderBy'])){        	$this->db2->order_by('sum(k.Qty)', 'DESC');        	if($pData['orderBy'] == 'value'){        		$this->db2->order_by('sum(k.Qty * k.ItmRate)', 'DESC');        	}        }        if(!empty($pData['modes'])){        	$this->db2->order_by('k.Qty', 'ASC');        	// full_menu        	if($pData['modes'] == 'traded_goods'){        		$this->db2->where('rmi.ItemId >', 0);        		$this->db2->where('rmi.EID', $EID);        		$this->db2->join('RMItems rmi', 'rmi.ItemId = mi.ItemId', 'inner');        	}        }		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');		$menuItem = "mi.Name$langId";		return $this->db2->select("DATE_FORMAT(DATE(b.billTime), '%d-%b-%Y') as billTime, (case when $menuItem != '-' Then $menuItem ELSE mi.Name1 end) as menuItem, sum(k.Qty) as Qty, sum(k.Qty * k.ItmRate) as itemValue ")						->order_by('b.billTime', 'ASC')						->group_by('k.ItemId, date(b.billTime)')						->join('KitchenMain km', 'km.MCNo = b.CNo', 'inner')						->join('Kitchen k', 'k.MCNo = km.MCNo', 'inner')						->join('MenuItem mi', 'mi.ItemId = k.ItemId', 'inner')						->where_in('b.Stat', array(1,5,25))						->get_where('Billing b', array(												'b.EID' => $EID,												'km.EID' => $EID,												'k.EID' => $EID,												'mi.EID' => $EID,												'k.Stat' => 3												)									)						->result_array();	}	public function getItemSalesRepots($pData){				if(!empty($pData['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($pData['fromDate'])));        }        if(!empty($pData['toDate'])){        	$this->db2->where('b.billTime <=', date('Y-m-d',strtotime($pData['toDate'])));        }        if(!empty($pData['orderBy'])){        	$this->db2->order_by('sum(k.Qty)', 'DESC');        	if($pData['orderBy'] == 'value'){        		$this->db2->order_by('sum(k.Qty * k.ItmRate)', 'DESC');        	}        }        if(!empty($pData['modes'])){        	// full_menu        	if($pData['modes'] == 'traded_goods'){        		$this->db2->where('rmi.ItemId >', 0);        		$this->db2->where('rmi.EID', $EID);        		$this->db2->join('RMItems rmi', 'rmi.ItemId = mi.ItemId', 'inner');        	}        }		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');		$menuItem = "mi.Name$langId";		return $this->db2->select("(case when $menuItem != '-' Then $menuItem ELSE mi.Name1 end) as menuItem, sum(k.Qty) as Qty, sum(k.Qty * k.ItmRate) as itemValue ")						->order_by("mi.Name1", 'ASC')						->group_by('k.ItemId')						->join('KitchenMain km', 'km.MCNo = b.CNo', 'inner')						->join('Kitchen k', 'k.MCNo = km.MCNo', 'inner')						->join('MenuItem mi', 'mi.ItemId = k.ItemId', 'inner')						->where_in('b.Stat', array(1,5,25))						->get_where('Billing b', array(												'b.EID' => $EID,												'km.EID' => $EID,												'k.EID' => $EID,												'mi.EID' => $EID,												'k.Stat' => 3												)									)						->result_array();	}		public function getContributionRepots($pData){		if(!empty($pData['fromDate'])){        	$this->db2->where('b.billTime >=', date('Y-m-d',strtotime($pData['fromDate'])));        }        if(!empty($pData['toDate'])){        	$this->db2->where('b.billTime <=', date('Y-m-d',strtotime($pData['toDate'])));        }        if(!empty($pData['cuisine'])){        	$this->db2->where('mi.CID', $pData['cuisine']);        }        if(!empty($pData['menucat'])){        	$this->db2->where('mi.MCatgId', $pData['menucat']);        }        if(!empty($pData['orderBy'])){        	$this->db2->order_by('sum(k.Qty)', 'DESC');        	if($pData['orderBy'] == 'value'){        		$this->db2->order_by('sum(k.Qty * k.ItmRate)', 'DESC');        	}        }        if(!empty($pData['modes'])){        	// full_menu        	if($pData['modes'] == 'traded_goods'){        		$this->db2->where('rmi.ItemId >', 0);        		$this->db2->where('rmi.EID', $EID);        		$this->db2->join('RMItems rmi', 'rmi.ItemId = mi.ItemId', 'inner');        	}        }        if(!empty($pData['OType'])){        	if($pData['OType']> 0){        		$this->db2->where('k.OType', $pData['OType']);        	}        }		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');		$itemName = "mi.Name$langId";		$menuCatName = "mc.Name$langId";		$CuisineName = "c.Name";		return $this->db2->select("DATE_FORMAT(DATE(b.billTime), '%d-%b-%Y') as billTime, (case when $CuisineName != '-' Then $CuisineName ELSE c.Name end) as CuisineName, (case when $menuCatName != '-' Then $menuCatName ELSE mc.Name1 end) as menuCatName, (case when $itemName != '-' Then $itemName ELSE mi.Name1 end) as itemName, sum(k.Qty) as Qty, sum(k.Qty * k.ItmRate) as itemValue, (SELECT sum(k1.Qty) FROM kitchen k1 WHERE k1.Stat = 3 and date(k1.LstModDt) = date(b.billTime) and k1.EID=b.EID) as totalQty, (SELECT sum(k2.Qty *k2.ItmRate) FROM kitchen k2 WHERE k2.Stat = 3 and date(k2.LstModDt) = date(b.billTime) and k2.EID=b.EID) as totalItemValue ")						->order_by("c.Name1, mc.Name1, mi.Name1", 'ASC')						->group_by('mi.ItemId, date(b.billTime)')						->join('KitchenMain km', 'km.MCNo = b.CNo', 'inner')						->join('Kitchen k', 'k.MCNo = km.MCNo', 'inner')						->join('MenuItem mi', 'mi.ItemId = k.ItemId', 'inner')						->join('MenuCatg mc', 'mc.MCatgId = mi.MCatgId', 'inner')						->join('Cuisines c', 'c.CID = mi.CID', 'inner')						->where_in('b.Stat', array(1,5,25))						->get_where('Billing b', array(												'b.EID' => $EID,												'km.EID' => $EID,												'k.EID' => $EID,												'mi.EID' => $EID,												'k.Stat' => 3												)									)						->result_array();	}	public function getQRCodesLink(){		$EID = authuser()->EID;		return $this->db2->get_where('QRCodes', array('EID' => $EID))->result_array();	}	public function getTempKitchenData($TableNo){		$EID = authuser()->EID;		$res = array();		$kstat = ($this->session->userdata('EType') == 5)?3:2;		$whr = " (k.MergeNo = '$TableNo' or k.TableNo = '$TableNo')";		$tempKit =  $this->db2->select("k.MCNo, k.CNo, k.ItemId, k.Itm_Portion, k.CellNo, k.OrdNo, k.CustItemDesc, k.KitCd, k.PckCharge, k.Qty, k.ItmRate, k.OrigRate, k.TaxType, k.ItemSale, k.custAddr, k.ItemTyp, k.DCd, k.SchCd, k.SDetCd, k.CustItem, k.CID, k.MCatgId, k.FID, k.itemName, k.PrepTime, k.CustRmks, k.TA, k.tmpItmRate, k.tmpOrigRate, IFNULL((select count(mr.RecNo) from MenuItem_Recos mr where mr.ItemId = k.ItemId and mr.EID = k.EID), 0) as recom, k.TableNo, k.CustItemId")					->order_by('OrdNo', 'DESC')					->where($whr)					->get_where('tempKitchen k', 												array('k.EID' => $EID, 													  // 'k.MergeNo' => $TableNo,													  'k.Stat' => 0))					->result_array();		$langId = $this->session->userdata('site_lang');        $itemName = "mi.Name$langId";		$kitDt = $this->db2->select("k.MCNo, km.CNo, k.ItemId, k.Itm_Portion, k.CellNo, k.OrdNo, k.CustItemDesc, k.KitCd, k.PckCharge, k.Qty, k.ItmRate, k.OrigRate, k.TaxType, k.CustRmks, mi.ItemSale, km.custAddr, k.ItemTyp, k.DCd, k.SchCd, k.SDetCd, k.CustItem, mi.CID, mi.MCatgId, mi.FID, (case when $itemName != '-' Then $itemName ELSE mi.Name1 end) as itemName, mi.PrepTime, k.TA, k.tmpItmRate, k.tmpOrigRate, IFNULL((select count(mr.RecNo) from MenuItem_Recos mr where mr.ItemId = k.ItemId and mr.EID = k.EID), 0) as recom, k.TableNo, k.CustItemId")					->order_by('k.OrdNo', 'DESC')					->join('KitchenMain km', 'km.CNo = k.CNo')					->join('MenuItem mi', 'mi.ItemId = k.ItemId')					->where($whr)					->get_where('Kitchen k', 												array('k.EID' => $EID,													  'km.EID' => $EID, 													  'mi.EID' => $EID, 													  // 'k.MergeNo' => $TableNo,													  'k.Stat' => $kstat,													  'k.BillStat' => 0))					->result_array();		if(!empty($tempKit)){			$res = $tempKit;		}		if(!empty($kitDt)){			$res = $kitDt;		}		if(!empty($kitDt) && !empty($tempKit)){			$res = array_merge($tempKit, $kitDt);		}		return $res;	}	public function getTempKitchenByOrdno($OrdNo){		$EID = authuser()->EID;		return $this->db2->select("*")					->order_by('OrdNo', 'DESC')					->get_where('tempKitchen', 												array('EID' => $EID, 													  'OrdNo' => $OrdNo,													  'Stat' => 0))					->row_array();	}	public function getCountries(){		return $this->db2->select('*')					->order_by('country_name', 'ASC')					->get_where('countries', array('Stat' => 0))->result_array();	}	public  function getSplitBills()	{		return $this->db2->select('b.BillId, b.BillNo, b.billTime, b.PaidAmt, b.CellNo, b.OType, b.TableNo, b.CNo, b.EID, b.MergeNo, b.CustId, k.FKOTNo, k.KOTNo')						->order_by('b.BillId', 'ASC')						->group_by('b.BillId')						->join('Kitchen k','k.MCNo = b.CNo', 'inner')						->where_in('b.splitTyp', array(1,2,3,4))						->get_where('Billing b', array(											'b.payRest' => 0,											'b.EID' => authuser()->EID,											'k.EID' => authuser()->EID											))						->result_array();	}	public function discountUserList(){		$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return  $this->db2->select("u.CustId, u.FName, u.LName, u.MobileNo, d.discId, (case when $lname != '-' Then $lname ELSE Name1 end) as name, d.pcent")						->join('discounts d', 'd.discId = u.discId', 'inner')						->get_where('Users u', 										array(											  'u.EID' => $EID,											  'd.EID' => $EID)								)->result_array();	}	public function getTablesDetails($EID, $OType){		return $this->db2->select('offerValid')->get_where('Eat_tables', array('EID' => $EID, 'TableNo' => $OType))->row_array();	}	public function getEatTablesDetails($TableNo){		$EID = authuser()->EID;		return $this->db2->get_where('Eat_tables', array('EID' => $EID, 'TableNo' => $TableNo))->row_array();	}	public function updateBillDiscountAmount($MergeNo){        $SchType = $this->session->userdata('SchType');        $EID = authuser()->EID;        if(in_array($SchType, array(1,3))){        	$EType = $this->session->userdata('EType');			$stat = ($EType == 5)?3:2;        	$whr = "km.MergeNo = $MergeNo";            $Offer = $this->db2->select("km.SchCd, km.SDetCd, sum(k.Qty * k.OrigRate) as orderAmount")            				->where($whr)            				->join('Kitchen k', 'k.MCNo = km.MCNo', 'inner')            				->get_where('KitchenMain km', array('km.EID' =>$EID, 'km.BillStat' => 0, 'k.Stat' => $stat))            				->row_array();			if(!empty($Offer)){	            $billOffer = $this->db2->select('cod.DiscMaxAmt, cod.MinBillAmt, cod.Disc_Amt, cod.Disc_pcent')	            					->join('CustOffersDet cod', 'cod.SchCd = c.SchCd', 'inner')	            					->get_where('CustOffers c', array('c.EID' => $EID, 'cod.SchCd' => $Offer['SchCd'], 'cod.SDetCd' => $Offer['SDetCd']))	            	            					->row_array();	            if(!empty($billOffer)){	                $dis = 0;	                if($Offer['orderAmount'] >= $billOffer['MinBillAmt']){	                	if($billOffer['DiscMaxAmt'] > 0){	                		$dis = $billOffer['DiscMaxAmt'];	                	}else if($billOffer['Disc_pcent'] > 0){	                        $amt = ($Offer['orderAmount'] * $billOffer['Disc_pcent']) / 100;	                        $amt  = round($amt);	                        if($amt > $billOffer['Disc_Amt']){	                        	$dis = $billOffer['Disc_Amt'];	                        }else{	                        	$dis = $amt;	                        }	                    }else{	                         if($billOffer['Disc_Amt'] > 0){	                            $dis = $billOffer['Disc_Amt'];	                        }   	                    }	                }	                $whr = "MergeNo = $MergeNo and EID = $EID";	                $this->db2->set('BillDiscAmt', $dis);	                $this->db2->where($whr);	                $this->db2->where('KitchenMain');	            }			}            				        }            	}	public function get_kitchen_list(){		$langId = $this->session->userdata('site_lang');        $KitName = "Name$langId";		return $this->db2->select("KitCd, (case when $KitName != '-' Then $KitName ELSE Name1 end) as KitName")->get_where('Eat_Kit', array('EID' => authuser()->EID, 'Stat' => 0))->result_array();	}	public function getToppings(){		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";        $fname = "fd.Name$langId";		return $this->db2->select("ItemId, (case when $lname != '-' Then $lname ELSE m.Name1 end) as ItemName, (case when $fname != '-' Then $fname ELSE fd.Name1 end) as Opt")					->join('FoodType fd', 'fd.FID = m.FID', 'inner')					->get_where('MenuItem m', array('m.EID' => authuser()->EID, 'm.Stat' => 5))->result_array();	}	public function getDiscountCategory(){		$langId = $this->session->userdata('site_lang');        $lname = "Name$langId";		return $this->db2->select("*, (case when $lname != '-' Then $lname ELSE Name1 end) as Name")->get_where('discounts', array('stat' => 0))		->result_array();		}	public function getLoyalities(){		return $this->db2->get('LoyaltyConfig')->result_array();	}	public function getCurrency(){		return $this->db2->get('Currency')->result_array();	}	public function getItemRatesByItemIdIPCd($ItemId, $IPCd){		return $this->db2->select("OrigRate, ItmRate")->get_where('MenuItemRates', array('ItemId' => $ItemId, 'Itm_Portion' => $IPCd, 'EID' =>authuser()->EID))->row_array();	}	public function getCategory(){		return $this->db2->get('Category')->result_array();	}	public function getBomDish(){		return $this->db2->get_where('BOM_Dish', array('Stat' => 0))->result_array();	}	public function getBomDet($BOMNo, $EID){		return $this->db2->select("bd.*")						->join('BOM_Dish b', 'b.BOMNo = bd.BOMNo', 'inner')						->get_where('BOM_DishDet bd', array('bd.BOMNo' => $BOMNo, 'b.EID' => $EID))->result_array();		}	public function getBOMOrders(){		$langId = $this->session->userdata('site_lang');        $kitchen = "m.Name";        $itemname = "b.Name";        $portion = "ip.Name$langId";		return $this->db2->select("bo.*, (case when $kitchen != '-' Then $kitchen ELSE m.Name end) as kitchen, (case when $itemname != '-' Then $itemname ELSE b.Name end) as itemname, (case when $portion != '-' Then $portion ELSE ip.Name1 end) as portions")						->join('BOM_Dish b', 'b.BOMNo = bo.BOMNo', 'inner')						->join('Masts m', 'm.MCd = bo.KitCd', 'inner')						->join('ItemPortions ip', 'ip.IPCd = bo.IPCd', 'inner')						->get_where('BOM_Order bo', array('bo.EID' => authuser()->EID, 'bo.Stat' => 0))->result_array();		}	public function getFoodTypeByCTyp($CTyp){		$langId = $this->session->userdata('site_lang');        $Opt = "Name$langId";		return $this->db2->select("FID, (case when $Opt != '-' Then $Opt ELSE Name1 end) as Opt")					->get_where('FoodType', array('CTyp' => $CTyp))					->result_array();	}	public function get_portion_item_type($dt){        $whr = '';        if(!empty($dt['ItemId'])){        	$whr = " mi.ItemId =".$dt['ItemId'];        }        if(!empty($dt['CID'])){        	$whr = " mi.CID =".$dt['CID'];        }        if(!empty($dt['MCatgId'])){        	$whr = " mi.MCatgId =".$dt['MCatgId'];        }        if(!empty($dt['ItemTyp'])){        	$whr = " mi.ItemTyp =".$dt['ItemTyp'];        }        $EID = authuser()->EID;        $langId = $this->session->userdata('site_lang');        $Portions = "ip.Name$langId";				return $this->db2->query("SELECT DISTINCT ip.IPCd, (case when $Portions != '-' Then $Portions ELSE ip.Name1 end) as Portions FROM `ItemPortions` ip, MenuItemRates mir where mir.Itm_Portion = ip.IPCd and mir.EID = $EID and ip.Stat = 0 and mir.ItemId in (select mi.ItemId from MenuItem mi where mi.EID = $EID and $whr)")						->result_array();	}	public function getToppingDetail($ItemId){		$langId = $this->session->userdata('site_lang');        $ItemName = "Name$langId";		return $this->db2->select("ItemId, (case when $ItemName != '-' Then $ItemName ELSE Name1 end) as ItemName, FID")					->get_where('MenuItem', array('EID' => authuser()->EID, 'Stat' => 5, 'ItemId' => $ItemId))					->row_array();	}	public function get_menu_list_by_stat($Stat){		$langId = $this->session->userdata('site_lang');        $ItemName = "Name$langId";		return $this->db2->select("ItemId, (case when $ItemName != '-' Then $ItemName ELSE Name1 end) as ItemName")					->get_where('MenuItem', array('EID' => authuser()->EID, 'Stat' => $Stat))					->result_array();	}	public function getEntertainmentList(){		$langId = $this->session->userdata('site_lang');        $Name = "e.Name$langId";        $weekDay = "e.Name$langId";		return $this->db2->select("ee.*, (case when $Name != '-' Then $Name ELSE e.Name1 end) as Name, (case when $weekDay != '-' Then $weekDay ELSE e.Name1 end) as weekDay")					->join('Entertainment e', 'e.EntId = ee.EntId', 'inner')					->join('WeekDays wd', 'wd.DayNo = ee.Dayno', 'inner')					->get_where('Eat_Ent ee', array('ee.EID' => authuser()->EID, 'ee.Stat' => 0))					->result_array();	}	public function getCuisineName($CID){		$dt = $this->db2->select("Name")->get_where('Cuisines', array('CID' => $CID))->row_array();		return $dt['Name'];	}	public function getSectionName($SecId){		$dt = $this->db2->select("Name")->get_where('Sections', array('SecId' => $SecId))->row_array();		return $dt['Name'];	}	public function getLanguageName($id){		$dt = $this->db2->select("LangName")->get_where('Languages', array('id' => $id))->row_array();		return $dt['LangName'];	}	public function getConfigPaymentName($PymtMode){		$langId = $this->session->userdata('site_lang');        $Name = "Name$langId";		$dt = $this->db2->select("(case when $Name != '-' Then $Name ELSE Name1 end) as Name")->get_where('ConfigPymt', array('PymtMode' => $PymtMode))->row_array();		return $dt['Name'];	}	public function getAllMenuListing(){		$langId = $this->session->userdata('site_lang');        $LngName = "Name$langId";		return $this->db2->select("roleGroup, pageUrl, (case when $LngName != '-' Then $LngName ELSE Name1 end) as LngName")						->order_by('roleGroup', 'ASC')						->get_where('UserRoles', array('Stat' => 0))->result_array();	}	public function countMenuItem(){		$dt = $this->db2->select("count(ItemId) as total")->get_where('MenuItem', array('EID' => authuser()->EID))->row_array();		return $dt['total'];	}	public function getLanguageList(){		return $this->db2->get('Languages')->result_array();	}	public function getCustomMenuItems(){				$EID = authuser()->EID;		$langId = $this->session->userdata('site_lang');        $mname = "m.Name$langId as Name";		return $this->db2->select("m.ItemId, $mname, m.FID, m.ItemTyp")					->get_where("MenuItem m", array('m.EID' => $EID, 'm.Stat' => 0, 'm.ItemTyp >' => 0))					->result_array();	}	public function fetchBiliingData_CTyp($EID, $CNo, $MergeNo, $per_cent, $CTyp){		$EType = $this->session->userdata('EType');		$stat = ($EType == 5)?3:2; 		$langId = $this->session->userdata('site_lang');        $lname = "m.Name$langId";        $ipname = "ip.Name$langId";        $wh_ctyp = " and m.CTyp != 1";        if($CTyp == 1){        	$wh_ctyp = " and m.CTyp = $CTyp";        }		return $this->db2->query("SELECT (if (k.ItemTyp > 0,(CONCAT($lname, ' - ' , k.CustItemDesc)),($lname ))) as ItemNm,sum(k.Qty * $per_cent) as Qty ,k.ItmRate,  SUM(if (k.TA=1,((k.ItmRate+m.PckCharge)*k.Qty * $per_cent),(k.ItmRate*k.Qty * $per_cent))) as OrdAmt, km.OType, km.LoginCd, (SELECT sum((k1.OrigRate-k1.ItmRate)* k1.Qty * $per_cent) from Kitchen k1 where (k1.CNo=km.CNo or k1.CNo=km.CNo) and k1.CNo=km.CNo and k1.EID=km.EID AND (k1.Stat = $stat) GROUP BY k1.EID) as TotItemDisc,(SELECT sum(k1.PckCharge * k1.Qty * $per_cent) from Kitchen k1 where (k1.CNo=km.CNo or k1.CNo=km.CNo) and k1.CNo=km.CNo and k1.EID=km.EID AND (k1.Stat = $stat) GROUP BY k1.EID) as TotPckCharge, (case when $ipname != '-' Then $ipname ELSE ip.Name1 end) as Portions, km.BillDiscAmt * $per_cent as BillDiscAmt, km.DelCharge * $per_cent as DelCharge, km.RtngDiscAmt * $per_cent as RtngDiscAmt, date(km.LstModDt) as OrdDt, k.Itm_Portion, k.TaxType,  c.ServChrg, c.Tips,e.Name,km.MergeNo,km.TableNo, km.MCNo, km.CustId, km.CellNo, k.ItemId  from Kitchen k, KitchenMain km, MenuItem m, Config c, Eatary e, ItemPortions ip where k.Itm_Portion = ip.IPCd and e.EID = c.EID AND c.EID = km.EID AND k.ItemId=m.ItemId and ( k.Stat = $stat) and km.EID = k.EID and km.EID = $EID And k.payRest = 0 and km.payRest = 0 and (k.CNo = km.CNo OR km.MCNo = k.MCNo) and (km.MCNo = $CNo and km.CNo = $CNo) and (km.MergeNo = k.MergeNo and km.MergeNo = '$MergeNo') $wh_ctyp group by km.MCNo, k.ItmRate,k.ItemTyp,k.CustItemDesc, k.Itm_Portion, m.Name1, date(km.LstModDt), k.TaxType, ip.Name1, c.ServChrg, c.Tips  order by TaxType, m.Name1 Asc")		->result_array();			}	public function getTaxList(){		$langId = $this->session->userdata('site_lang');        $tname = "Name$langId as taxName";		return $this->db2->select("*, $tname")						->order_by('TNo', 'ASC')						->get_where('Tax', array('Stat' =>0))						->result_array();	}	}